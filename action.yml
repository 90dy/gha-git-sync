name: Git sync from 90dy
description: Permit to sync last changes from another repository
inputs:
  repository:
    description: Repository to pull from
    required: true
  branch:
    description: Branch to sync
    required: true
  user-email:
    description: Git user email
    required: true
  user-name:
    description: Git user name
    required: true
  paths:
    description: File paths to sync (not directories)
  commit-message:
    description: Commit message
  assignees:
    description: A comma or newline-separated list of assignees (GitHub usernames).

runs:
  using: composite
  steps:
  - shell: bash
    id: get-branch-name
    run: |
      # Get current branch name
      echo "branch-name=$(git rev-parse --abbrev-ref HEAD)" > $GITHUB_OUTPUT

  - shell: bash
    run: |
      # Set commiter author
      git config --global user.email "${{ inputs.user-email }}"
      git config --global user.name "${{ inputs.user-name }}"

  - shell: bash
    run: |
      # Fetch repository
      git fetch ${{ inputs.repository }} ${{ inputs.branch }}

  - shell: bash
    run: |
      # Checkout new branch to ${{ inputs.repository }}/${{ inputs.branch }}
      git checkout -b ${{ inputs.repository }}/${{ inputs.branch }}

  - shell: bash
    id: rebase
    run: |
      # Try to rebase and push on current branch
      git rebase ${{ steps.get-branch-name.outputs.branch-name }} -- $([ -z "${{ inputs.paths }}" ] || echo "${{ inputs.paths }}" | xargs echo)

  - shell: bash
    id: merge
    if: success() && steps.rebase.conclusion == 'success'
    run: |
      # Then merge to current branch
      git checkout ${{ steps.get-branch-name.outputs.branch-name }}
      git merge ${{ inputs.repository }}/${{ inputs.branch }}

  - shell: bash
    id: push
    if: success() && steps.merge.conclusion == 'success'
    run: |
      # Then push to  current branch if necessary
      git push -u origin ${{ steps.get-branch-name.outputs.branch-name }}

  - shell: bash
    id: abort
    if: failure() && steps.rebase.conclusion == 'failure'
    run: |
      # Else abort and create a pull request to ${{ inputs.repository }}/${{ inputs.branch }}
      git rebase --abort

  - if: success() && steps.abort.conclusion == 'success'
    uses: peter-evans/create-pull-request@v5
    with:
      token: ${{ env.GITHUB_TOKEN }}
      title: Sync from ${{ inputs.repository }}/${{ inputs.branch }}
      branch:  ${{ inputs.repository }}/${{ inputs.branch }}
      author: ${{ inputs.user-name }} <${{ inputs.user-email }}>
      committer: ${{ inputs.user-name }} <${{ inputs.user-email }}>
      assignees: ${{ inputs.assignees }}
